import time
import os
import re
import smtplib
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import Select, WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.exceptions import NoSuchElementException
from selenium.webdriver.chrome.service import Service

# Hardcoded email and password (use environment variables in production)
email = "yjin3073@gmail.com"
password = "woyqfyvopjikowns"  # Replace with an app-specific password for security

# Location details
location = "44600"  # your zip code
distance = "20 miles"  # choose the distance

class TestSatchecker():
    def setup_method(self):
        service = Service('chromedriver.exe')
        self.driver = webdriver.Chrome(service=service)
        self.driver.implicitly_wait(10)
        self.actions = ActionChains(self.driver)

    def teardown_method(self):
        self.driver.quit()

    def test_satchecker(self):
        self.driver.get("https://satsuite.collegeboard.org/sat/test-center-search")

        # Select the test date
        dropdown = Select(self.driver.find_element(By.ID, "apricot_select_4"))
        dropdown.select_by_visible_text("December 7, 2024 â€” Saturday")  # Change as needed

        # Enter location (zip code)
        text_input = self.driver.find_element(By.ID, "apricot_input_5")
        text_input.send_keys(location)

        # Select distance
        dropdown = Select(self.driver.find_element(By.ID, "apricot_select_6"))
        dropdown.select_by_visible_text(distance)

        # Click 'Find a Test Center' button
        button = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(),'Find a Test Center')]"))
        )
        button.click()
        
        time.sleep(2)

        try:
            # Extract the text that contains test center availability
            element = self.driver.find_element(By.XPATH, "//*[contains(text(),'Test centers with available seats')]")
            text = element.text
            print(text)
            number = int(re.findall(r'\d+', text)[0])

            if number > 0:
                self.send_email(number)
        
        except NoSuchElementException:
            print("No available test centers found. Retrying...")

        except IndexError:
            print("Unable to extract number of available centers.")

    def send_email(self, number):
        try:
            # Create SMTP session
            s = smtplib.SMTP('smtp.gmail.com', 587)
            s.starttls()  # Start TLS for security

            # Login to email
            s.login(email, password)

            # Compose and send email
            message = f"{number} Testing Centers Open"
            s.sendmail(email, email, message)
            print(f"Email sent: {message}")

            # Quit the session
            s.quit()

        except Exception as e:
            print(f"Failed to send email: {e}")

checker = TestSatchecker()
checker.setup_method()

# Retry loop with up to 5 retries
max_retries = 5
for attempt in range(max_retries):
    try:
        checker.test_satchecker()
        break  # Exit the loop if successful
    except Exception as e:
        print(f"Error during attempt {attempt + 1}: {e}. Retrying...")
        time.sleep(5)  # Wait before retrying

checker.teardown_method()

